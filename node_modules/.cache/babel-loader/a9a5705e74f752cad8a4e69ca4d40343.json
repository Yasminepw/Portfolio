{"ast":null,"code":"var _jsxFileName = \"/Users/businessprojects/Documents/GitHub/Gazi/src/components/GaziModel.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nclass ThreeJSAnimation extends Component {\n  componentDidMount() {\n    (function () {\n      // Set our main variables\n      let scene,\n          renderer,\n          camera,\n          model,\n          // Our character\n      neck,\n          // Reference to the neck bone in the skeleton\n      waist,\n          // Reference to the waist bone in the skeleton\n      mixer,\n          // THREE.js animations mixer\n      idle,\n          // Idle, the default state our character returns to\n      clock = new THREE.Clock(); // Used for anims, which run to a clock instead of frame rate\n\n      init();\n\n      function init() {\n        const MODEL_PATH = \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/stacy_lightweight.glb\";\n        const backgroundColor = 0x0a192f; // Init the scene\n\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color(backgroundColor);\n        scene.fog = null; // Init the renderer\n\n        renderer = new THREE.WebGLRenderer({\n          alpha: true\n        });\n        renderer.shadowMap.enabled = true;\n        renderer.setSize(0.35 * window.innerWidth, 0.35 * window.innerHeight);\n        var container = document.getElementById(\"gazi-model\");\n        container.appendChild(renderer.domElement); // Add a camera\n\n        camera = new THREE.PerspectiveCamera(65, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.z = 30;\n        camera.position.x = 0;\n        camera.position.y = -3;\n        const stacy_mtl = new THREE.MeshPhongMaterial({\n          color: 0xccd6f6,\n          skinning: true\n        });\n        var loader = new GLTFLoader();\n        loader.load(MODEL_PATH, function (gltf) {\n          // A lot is going to happen here\n          model = gltf.scene;\n          let fileAnimations = gltf.animations;\n          model.traverse(o => {\n            if (o.isMesh) {\n              o.castShadow = true;\n              o.receiveShadow = true;\n              o.material = stacy_mtl;\n            } // Reference the neck and waist bones\n\n\n            if (o.isBone && o.name === \"mixamorigNeck\") {\n              neck = o;\n            }\n\n            if (o.isBone && o.name === \"mixamorigSpine\") {\n              waist = o;\n            }\n          }); // Set the models initial scale\n\n          model.scale.set(15, 15, 15);\n          model.position.y = -23;\n          scene.add(model);\n          mixer = new THREE.AnimationMixer(model);\n          let idleAnim = THREE.AnimationClip.findByName(fileAnimations, \"idle\");\n          idleAnim.tracks.splice(3, 3);\n          idleAnim.tracks.splice(9, 3);\n          idle = mixer.clipAction(idleAnim);\n          idle.play();\n        }, undefined, // We don't need this function\n        function (error) {\n          console.error(error);\n        }); // Add lights\n\n        let hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.61);\n        hemiLight.position.set(0, 50, 0); // Add hemisphere light to scene\n\n        scene.add(hemiLight);\n        let d = 8.25;\n        let dirLight = new THREE.DirectionalLight(0xffffff, 0.54);\n        dirLight.position.set(-8, 12, 8);\n        dirLight.castShadow = true;\n        dirLight.shadow.mapSize = new THREE.Vector2(1024, 1024);\n        dirLight.shadow.camera.near = 0.1;\n        dirLight.shadow.camera.far = 1500;\n        dirLight.shadow.camera.left = d * -1;\n        dirLight.shadow.camera.right = d;\n        dirLight.shadow.camera.top = d;\n        dirLight.shadow.camera.bottom = d * -1; // Add directional Light to scene\n\n        scene.add(dirLight); // Floor\n\n        let floorGeometry = new THREE.PlaneGeometry(5000, 5000, 1, 1);\n        let floorMaterial = new THREE.MeshPhongMaterial({\n          color: 0x0a192f,\n          shininess: 0\n        });\n        let floor = new THREE.Mesh(floorGeometry, floorMaterial);\n        floor.rotation.x = -0.5 * Math.PI; // This is 90 degrees by the way\n\n        floor.receiveShadow = true;\n        floor.position.y = -11;\n        scene.add(floor);\n        let geometry = new THREE.SphereGeometry(16, 46, 46);\n        let material = new THREE.MeshBasicMaterial({\n          color: 0x64ffda\n        });\n        let sphere = new THREE.Mesh(geometry, material);\n        sphere.position.z = -30;\n        sphere.position.y = -2.5;\n        sphere.position.x = -0.25;\n        scene.add(sphere);\n      }\n\n      function update() {\n        if (mixer) {\n          mixer.update(clock.getDelta());\n        }\n\n        if (resizeRendererToDisplaySize(renderer)) {\n          const canvas = renderer.domElement;\n          camera.aspect = canvas.clientWidth / canvas.clientHeight;\n          camera.updateProjectionMatrix();\n        }\n\n        renderer.render(scene, camera);\n        requestAnimationFrame(update);\n      }\n\n      update();\n\n      function resizeRendererToDisplaySize(renderer) {\n        const canvas = renderer.domElement;\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n        let canvasPixelWidth = canvas.width / window.devicePixelRatio;\n        let canvasPixelHeight = canvas.height / window.devicePixelRatio;\n        const needResize = canvasPixelWidth !== width || canvasPixelHeight !== height;\n\n        if (needResize) {\n          renderer.setSize(width, height, false);\n        }\n\n        return needResize;\n      }\n\n      document.addEventListener(\"mousemove\", function (e) {\n        var mousecoords = getMousePos(e);\n\n        if (neck && waist) {\n          moveJoint(mousecoords, neck, 50);\n          moveJoint(mousecoords, waist, 30);\n        }\n      });\n\n      function getMousePos(e) {\n        return {\n          x: e.clientX,\n          y: e.clientY\n        };\n      }\n\n      function moveJoint(mouse, joint, degreeLimit) {\n        let degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit);\n        joint.rotation.y = THREE.Math.degToRad(degrees.x);\n        joint.rotation.x = THREE.Math.degToRad(degrees.y);\n      }\n\n      function getMouseDegrees(x, y, degreeLimit) {\n        let dx = 0,\n            dy = 0,\n            xdiff,\n            xPercentage,\n            ydiff,\n            yPercentage;\n        let w = {\n          x: window.innerWidth,\n          y: window.innerHeight\n        }; // Left (Rotates neck left between 0 and -degreeLimit)\n        // 1. If cursor is in the left half of screen\n\n        if (x <= w.x / 2) {\n          // 2. Get the difference between middle of screen and cursor position\n          xdiff = w.x / 2 - x; // 3. Find the percentage of that difference (percentage toward edge of screen)\n\n          xPercentage = xdiff / (w.x / 2) * 100; // 4. Convert that to a percentage of the maximum rotation we allow for the neck\n\n          dx = degreeLimit * xPercentage / 100 * -1;\n        } // Right (Rotates neck right between 0 and degreeLimit)\n\n\n        if (x >= w.x / 2) {\n          xdiff = x - w.x / 2;\n          xPercentage = xdiff / (w.x / 2) * 100;\n          dx = degreeLimit * xPercentage / 100;\n        } // Up (Rotates neck up between 0 and -degreeLimit)\n\n\n        if (y <= w.y / 2) {\n          ydiff = w.y / 2 - y;\n          yPercentage = ydiff / (w.y / 2) * 100; // Note that I cut degreeLimit in half when she looks up\n\n          dy = degreeLimit * 0.5 * yPercentage / 100 * -1;\n        } // Down (Rotates neck down between 0 and degreeLimit)\n\n\n        if (y >= w.y / 2) {\n          ydiff = y - w.y / 2;\n          yPercentage = ydiff / (w.y / 2) * 100;\n          dy = degreeLimit * yPercentage / 100;\n        }\n\n        return {\n          x: dx,\n          y: dy\n        };\n      }\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default ThreeJSAnimation;","map":{"version":3,"sources":["/Users/businessprojects/Documents/GitHub/Gazi/src/components/GaziModel.js"],"names":["React","Component","THREE","GLTFLoader","ThreeJSAnimation","componentDidMount","scene","renderer","camera","model","neck","waist","mixer","idle","clock","Clock","init","MODEL_PATH","backgroundColor","Scene","background","Color","fog","WebGLRenderer","alpha","shadowMap","enabled","setSize","window","innerWidth","innerHeight","container","document","getElementById","appendChild","domElement","PerspectiveCamera","position","z","x","y","stacy_mtl","MeshPhongMaterial","color","skinning","loader","load","gltf","fileAnimations","animations","traverse","o","isMesh","castShadow","receiveShadow","material","isBone","name","scale","set","add","AnimationMixer","idleAnim","AnimationClip","findByName","tracks","splice","clipAction","play","undefined","error","console","hemiLight","HemisphereLight","d","dirLight","DirectionalLight","shadow","mapSize","Vector2","near","far","left","right","top","bottom","floorGeometry","PlaneGeometry","floorMaterial","shininess","floor","Mesh","rotation","Math","PI","geometry","SphereGeometry","MeshBasicMaterial","sphere","update","getDelta","resizeRendererToDisplaySize","canvas","aspect","clientWidth","clientHeight","updateProjectionMatrix","render","requestAnimationFrame","width","height","canvasPixelWidth","devicePixelRatio","canvasPixelHeight","needResize","addEventListener","e","mousecoords","getMousePos","moveJoint","clientX","clientY","mouse","joint","degreeLimit","degrees","getMouseDegrees","degToRad","dx","dy","xdiff","xPercentage","ydiff","yPercentage","w","ref","mount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nclass ThreeJSAnimation extends Component {\n  componentDidMount() {\n    (function () {\n      // Set our main variables\n      let scene,\n        renderer,\n        camera,\n        model, // Our character\n        neck, // Reference to the neck bone in the skeleton\n        waist, // Reference to the waist bone in the skeleton\n        mixer, // THREE.js animations mixer\n        idle, // Idle, the default state our character returns to\n        clock = new THREE.Clock(); // Used for anims, which run to a clock instead of frame rate\n\n      init();\n\n      function init() {\n        const MODEL_PATH =\n          \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/stacy_lightweight.glb\";\n        const backgroundColor = 0x0a192f;\n        // Init the scene\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color(backgroundColor);\n        scene.fog = null;\n\n        // Init the renderer\n        renderer = new THREE.WebGLRenderer({\n          alpha: true\n        });\n        renderer.shadowMap.enabled = true;\n        renderer.setSize(0.35 * window.innerWidth, 0.35 * window.innerHeight);\n        var container = document.getElementById(\"gazi-model\");\n        container.appendChild(renderer.domElement);\n\n        // Add a camera\n        camera = new THREE.PerspectiveCamera(\n          65,\n          window.innerWidth / window.innerHeight,\n          0.1,\n          1000\n        );\n        camera.position.z = 30;\n        camera.position.x = 0;\n        camera.position.y = -3;\n\n        const stacy_mtl = new THREE.MeshPhongMaterial({\n          color: 0xccd6f6,\n          skinning: true\n        });\n\n        var loader = new GLTFLoader();\n\n        loader.load(\n          MODEL_PATH,\n          function (gltf) {\n            // A lot is going to happen here\n            model = gltf.scene;\n            let fileAnimations = gltf.animations;\n\n            model.traverse(o => {\n              if (o.isMesh) {\n                o.castShadow = true;\n                o.receiveShadow = true;\n                o.material = stacy_mtl;\n              }\n              // Reference the neck and waist bones\n              if (o.isBone && o.name === \"mixamorigNeck\") {\n                neck = o;\n              }\n              if (o.isBone && o.name === \"mixamorigSpine\") {\n                waist = o;\n              }\n            });\n\n            // Set the models initial scale\n            model.scale.set(15, 15, 15);\n            model.position.y = -23;\n\n            scene.add(model);\n            mixer = new THREE.AnimationMixer(model);\n            let idleAnim = THREE.AnimationClip.findByName(\n              fileAnimations,\n              \"idle\"\n            );\n            idleAnim.tracks.splice(3, 3);\n            idleAnim.tracks.splice(9, 3);\n            idle = mixer.clipAction(idleAnim);\n            idle.play();\n          },\n          undefined, // We don't need this function\n          function (error) {\n            console.error(error);\n          }\n        );\n\n        // Add lights\n        let hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.61);\n        hemiLight.position.set(0, 50, 0);\n        // Add hemisphere light to scene\n        scene.add(hemiLight);\n\n        let d = 8.25;\n        let dirLight = new THREE.DirectionalLight(0xffffff, 0.54);\n        dirLight.position.set(-8, 12, 8);\n        dirLight.castShadow = true;\n        dirLight.shadow.mapSize = new THREE.Vector2(1024, 1024);\n        dirLight.shadow.camera.near = 0.1;\n        dirLight.shadow.camera.far = 1500;\n        dirLight.shadow.camera.left = d * -1;\n        dirLight.shadow.camera.right = d;\n        dirLight.shadow.camera.top = d;\n        dirLight.shadow.camera.bottom = d * -1;\n        // Add directional Light to scene\n        scene.add(dirLight);\n\n        // Floor\n        let floorGeometry = new THREE.PlaneGeometry(5000, 5000, 1, 1);\n        let floorMaterial = new THREE.MeshPhongMaterial({\n          color: 0x0a192f,\n          shininess: 0\n        });\n\n        let floor = new THREE.Mesh(floorGeometry, floorMaterial);\n        floor.rotation.x = -0.5 * Math.PI; // This is 90 degrees by the way\n        floor.receiveShadow = true;\n        floor.position.y = -11;\n        scene.add(floor);\n\n        let geometry = new THREE.SphereGeometry(16, 46, 46);\n        let material = new THREE.MeshBasicMaterial({\n          color: 0x64ffda\n        });\n        let sphere = new THREE.Mesh(geometry, material);\n        sphere.position.z = -30;\n        sphere.position.y = -2.5;\n        sphere.position.x = -0.25;\n        scene.add(sphere);\n      }\n\n      function update() {\n        if (mixer) {\n          mixer.update(clock.getDelta());\n        }\n        if (resizeRendererToDisplaySize(renderer)) {\n          const canvas = renderer.domElement;\n          camera.aspect = canvas.clientWidth / canvas.clientHeight;\n          camera.updateProjectionMatrix();\n        }\n        renderer.render(scene, camera);\n        requestAnimationFrame(update);\n      }\n      update();\n\n      function resizeRendererToDisplaySize(renderer) {\n        const canvas = renderer.domElement;\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n        let canvasPixelWidth = canvas.width / window.devicePixelRatio;\n        let canvasPixelHeight = canvas.height / window.devicePixelRatio;\n\n        const needResize =\n          canvasPixelWidth !== width || canvasPixelHeight !== height;\n        if (needResize) {\n          renderer.setSize(width, height, false);\n        }\n        return needResize;\n      }\n      document.addEventListener(\"mousemove\", function (e) {\n        var mousecoords = getMousePos(e);\n        if (neck && waist) {\n          moveJoint(mousecoords, neck, 50);\n          moveJoint(mousecoords, waist, 30);\n        }\n      });\n\n      function getMousePos(e) {\n        return {\n          x: e.clientX,\n          y: e.clientY\n        };\n      }\n\n      function moveJoint(mouse, joint, degreeLimit) {\n        let degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit);\n        joint.rotation.y = THREE.Math.degToRad(degrees.x);\n        joint.rotation.x = THREE.Math.degToRad(degrees.y);\n      }\n\n      function getMouseDegrees(x, y, degreeLimit) {\n        let dx = 0,\n          dy = 0,\n          xdiff,\n          xPercentage,\n          ydiff,\n          yPercentage;\n\n        let w = {\n          x: window.innerWidth,\n          y: window.innerHeight\n        };\n\n        // Left (Rotates neck left between 0 and -degreeLimit)\n\n        // 1. If cursor is in the left half of screen\n        if (x <= w.x / 2) {\n          // 2. Get the difference between middle of screen and cursor position\n          xdiff = w.x / 2 - x;\n          // 3. Find the percentage of that difference (percentage toward edge of screen)\n          xPercentage = (xdiff / (w.x / 2)) * 100;\n          // 4. Convert that to a percentage of the maximum rotation we allow for the neck\n          dx = ((degreeLimit * xPercentage) / 100) * -1;\n        }\n        // Right (Rotates neck right between 0 and degreeLimit)\n        if (x >= w.x / 2) {\n          xdiff = x - w.x / 2;\n          xPercentage = (xdiff / (w.x / 2)) * 100;\n          dx = (degreeLimit * xPercentage) / 100;\n        }\n        // Up (Rotates neck up between 0 and -degreeLimit)\n        if (y <= w.y / 2) {\n          ydiff = w.y / 2 - y;\n          yPercentage = (ydiff / (w.y / 2)) * 100;\n          // Note that I cut degreeLimit in half when she looks up\n          dy = ((degreeLimit * 0.5 * yPercentage) / 100) * -1;\n        }\n\n        // Down (Rotates neck down between 0 and degreeLimit)\n        if (y >= w.y / 2) {\n          ydiff = y - w.y / 2;\n          yPercentage = (ydiff / (w.y / 2)) * 100;\n          dy = (degreeLimit * yPercentage) / 100;\n        }\n        return {\n          x: dx,\n          y: dy\n        };\n      }\n    })();\n  }\n  render() {\n    return <div ref={ref => (this.mount = ref)} />;\n  }\n}\nexport default ThreeJSAnimation;\n"]},"metadata":{},"sourceType":"module"}