{"ast":null,"code":"var richTypes = {\n  Date: true,\n  RegExp: true,\n  String: true,\n  Number: true\n};\nexport default function diff(obj, newObj) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    cyclesFix: true\n  };\n\n  var _stack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  var diffs = [];\n  var isObjArray = Array.isArray(obj);\n\n  var _loop = function _loop(key) {\n    var objKey = obj[key];\n    var path = isObjArray ? +key : key;\n\n    if (!(key in newObj)) {\n      diffs.push({\n        type: \"REMOVE\",\n        path: [path],\n        oldValue: obj[key]\n      });\n      return \"continue\";\n    }\n\n    var newObjKey = newObj[key];\n    var areObjects = typeof objKey === \"object\" && typeof newObjKey === \"object\";\n\n    if (objKey && newObjKey && areObjects && !richTypes[Object.getPrototypeOf(objKey).constructor.name] && (!options.cyclesFix || !_stack.includes(objKey))) {\n      var nestedDiffs = diff(objKey, newObjKey, options, options.cyclesFix ? _stack.concat([objKey]) : []);\n      diffs.push.apply(diffs, nestedDiffs.map(function (difference) {\n        difference.path.unshift(path);\n        return difference;\n      }));\n    } else if (objKey !== newObjKey && !(areObjects && (isNaN(objKey) ? objKey + \"\" === newObjKey + \"\" : +objKey === +newObjKey))) {\n      diffs.push({\n        path: [path],\n        type: \"CHANGE\",\n        value: newObjKey,\n        oldValue: objKey\n      });\n    }\n  };\n\n  for (var key in obj) {\n    var _ret = _loop(key);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  var isNewObjArray = Array.isArray(newObj);\n\n  for (var _key in newObj) {\n    if (!(_key in obj)) {\n      diffs.push({\n        type: \"CREATE\",\n        path: [isNewObjArray ? +_key : _key],\n        value: newObj[_key]\n      });\n    }\n  }\n\n  return diffs;\n}","map":{"version":3,"sources":["/Users/businessprojects/Documents/GitHub/Portfolio/node_modules/microdiff/dist/index.js"],"names":["richTypes","Date","RegExp","String","Number","diff","obj","newObj","options","cyclesFix","_stack","diffs","isObjArray","Array","isArray","key","objKey","path","push","type","oldValue","newObjKey","areObjects","Object","getPrototypeOf","constructor","name","includes","nestedDiffs","concat","apply","map","difference","unshift","isNaN","value","isNewObjArray"],"mappings":"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","sourcesContent":["const richTypes = { Date: true, RegExp: true, String: true, Number: true };\nexport default function diff(\n\tobj,\n\tnewObj,\n\toptions = { cyclesFix: true },\n\t_stack = []\n) {\n\tlet diffs = [];\n\tconst isObjArray = Array.isArray(obj);\n\tfor (const key in obj) {\n\t\tconst objKey = obj[key];\n\t\tconst path = isObjArray ? +key : key;\n\t\tif (!(key in newObj)) {\n\t\t\tdiffs.push({\n\t\t\t\ttype: \"REMOVE\",\n\t\t\t\tpath: [path],\n\t\t\t\toldValue: obj[key],\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\t\tconst newObjKey = newObj[key];\n\t\tconst areObjects =\n\t\t\ttypeof objKey === \"object\" && typeof newObjKey === \"object\";\n\t\tif (\n\t\t\tobjKey &&\n\t\t\tnewObjKey &&\n\t\t\tareObjects &&\n\t\t\t!richTypes[Object.getPrototypeOf(objKey).constructor.name] &&\n\t\t\t(!options.cyclesFix || !_stack.includes(objKey))\n\t\t) {\n\t\t\tconst nestedDiffs = diff(\n\t\t\t\tobjKey,\n\t\t\t\tnewObjKey,\n\t\t\t\toptions,\n\t\t\t\toptions.cyclesFix ? _stack.concat([objKey]) : []\n\t\t\t);\n\t\t\tdiffs.push.apply(\n\t\t\t\tdiffs,\n\t\t\t\tnestedDiffs.map((difference) => {\n\t\t\t\t\tdifference.path.unshift(path);\n\t\t\t\t\treturn difference;\n\t\t\t\t})\n\t\t\t);\n\t\t} else if (\n\t\t\tobjKey !== newObjKey &&\n\t\t\t!(\n\t\t\t\tareObjects &&\n\t\t\t\t(isNaN(objKey)\n\t\t\t\t\t? objKey + \"\" === newObjKey + \"\"\n\t\t\t\t\t: +objKey === +newObjKey)\n\t\t\t)\n\t\t) {\n\t\t\tdiffs.push({\n\t\t\t\tpath: [path],\n\t\t\t\ttype: \"CHANGE\",\n\t\t\t\tvalue: newObjKey,\n\t\t\t\toldValue: objKey,\n\t\t\t});\n\t\t}\n\t}\n\tconst isNewObjArray = Array.isArray(newObj);\n\tfor (const key in newObj) {\n\t\tif (!(key in obj)) {\n\t\t\tdiffs.push({\n\t\t\t\ttype: \"CREATE\",\n\t\t\t\tpath: [isNewObjArray ? +key : key],\n\t\t\t\tvalue: newObj[key],\n\t\t\t});\n\t\t}\n\t}\n\treturn diffs;\n}\n"]},"metadata":{},"sourceType":"module"}